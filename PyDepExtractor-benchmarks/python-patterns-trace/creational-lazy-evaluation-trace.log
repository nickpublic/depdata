 --- modulename: lazy_evaluation, funcname: <module>
lazy_evaluation.py(23): """
lazy_evaluation.py(25): from __future__ import print_function
lazy_evaluation.py(26): import functools
lazy_evaluation.py(29): class lazy_property(object):
 --- modulename: lazy_evaluation, funcname: lazy_property
lazy_evaluation.py(29): class lazy_property(object):
lazy_evaluation.py(31):     def __init__(self, function):
lazy_evaluation.py(35):     def __get__(self, obj, type_):
lazy_evaluation.py(43): def lazy_property2(fn):
lazy_evaluation.py(54): class Person(object):
 --- modulename: lazy_evaluation, funcname: Person
lazy_evaluation.py(54): class Person(object):
lazy_evaluation.py(56):     def __init__(self, name, occupation):
lazy_evaluation.py(61):     @lazy_property
 --- modulename: lazy_evaluation, funcname: __init__
lazy_evaluation.py(32):         self.function = function
lazy_evaluation.py(33):         functools.update_wrapper(self, function)
lazy_evaluation.py(67):     @lazy_property2
 --- modulename: lazy_evaluation, funcname: lazy_property2
lazy_evaluation.py(44):     attr = '_lazy__' + fn.__name__
lazy_evaluation.py(46):     @property
lazy_evaluation.py(51):     return _lazy_property
lazy_evaluation.py(73): def main():
lazy_evaluation.py(87): if __name__ == '__main__':
lazy_evaluation.py(88):     main()
 --- modulename: lazy_evaluation, funcname: main
lazy_evaluation.py(74):     Jhon = Person('Jhon', 'Coder')
 --- modulename: lazy_evaluation, funcname: __init__
lazy_evaluation.py(57):         self.name = name
lazy_evaluation.py(58):         self.occupation = occupation
lazy_evaluation.py(59):         self.call_count2 = 0
lazy_evaluation.py(75):     print(u"Name: {0}    Occupation: {1}".format(Jhon.name, Jhon.occupation))
Name: Jhon    Occupation: Coder
lazy_evaluation.py(76):     print(u"Before we access `relatives`:")
Before we access `relatives`:
lazy_evaluation.py(77):     print(Jhon.__dict__)
{'name': 'Jhon', 'occupation': 'Coder', 'call_count2': 0}
lazy_evaluation.py(78):     print(u"Jhon's relatives: {0}".format(Jhon.relatives))
 --- modulename: lazy_evaluation, funcname: __get__
lazy_evaluation.py(36):         if obj is None:
lazy_evaluation.py(38):         val = self.function(obj)
 --- modulename: lazy_evaluation, funcname: relatives
lazy_evaluation.py(64):         relatives = "Many relatives."
lazy_evaluation.py(65):         return relatives
lazy_evaluation.py(39):         obj.__dict__[self.function.__name__] = val
lazy_evaluation.py(40):         return val
Jhon's relatives: Many relatives.
lazy_evaluation.py(79):     print(u"After we've accessed `relatives`:")
After we've accessed `relatives`:
lazy_evaluation.py(80):     print(Jhon.__dict__)
{'name': 'Jhon', 'occupation': 'Coder', 'call_count2': 0, 'relatives': 'Many relatives.'}
lazy_evaluation.py(81):     print(Jhon.parents)
 --- modulename: lazy_evaluation, funcname: _lazy_property
lazy_evaluation.py(48):         if not hasattr(self, attr):
lazy_evaluation.py(49):             setattr(self, attr, fn(self))
 --- modulename: lazy_evaluation, funcname: parents
lazy_evaluation.py(69):         self.call_count2 += 1
lazy_evaluation.py(70):         return "Father and mother"
lazy_evaluation.py(50):         return getattr(self, attr)
Father and mother
lazy_evaluation.py(82):     print(Jhon.__dict__)
{'name': 'Jhon', 'occupation': 'Coder', 'call_count2': 1, 'relatives': 'Many relatives.', '_lazy__parents': 'Father and mother'}
lazy_evaluation.py(83):     print(Jhon.parents)
 --- modulename: lazy_evaluation, funcname: _lazy_property
lazy_evaluation.py(48):         if not hasattr(self, attr):
lazy_evaluation.py(50):         return getattr(self, attr)
Father and mother
lazy_evaluation.py(84):     print(Jhon.call_count2)
1
