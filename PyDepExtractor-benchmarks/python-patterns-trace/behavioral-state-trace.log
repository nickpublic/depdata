 --- modulename: state, funcname: <module>
state.py(12): """
state.py(14): from __future__ import print_function
state.py(17): class State(object):
 --- modulename: state, funcname: State
state.py(17): class State(object):
state.py(19):     """Base state. This is to share functionality"""
state.py(21):     def scan(self):
state.py(30): class AmState(State):
 --- modulename: state, funcname: AmState
state.py(30): class AmState(State):
state.py(32):     def __init__(self, radio):
state.py(38):     def toggle_amfm(self):
state.py(43): class FmState(State):
 --- modulename: state, funcname: FmState
state.py(43): class FmState(State):
state.py(45):     def __init__(self, radio):
state.py(51):     def toggle_amfm(self):
state.py(56): class Radio(object):
 --- modulename: state, funcname: Radio
state.py(56): class Radio(object):
state.py(58):     """A radio.     It has a scan button, and an AM/FM toggle switch."""
state.py(60):     def __init__(self):
state.py(66):     def toggle_amfm(self):
state.py(69):     def scan(self):
state.py(74): if __name__ == '__main__':
state.py(75):     radio = Radio()
 --- modulename: state, funcname: __init__
state.py(62):         self.amstate = AmState(self)
 --- modulename: state, funcname: __init__
state.py(33):         self.radio = radio
state.py(34):         self.stations = ["1250", "1380", "1510"]
state.py(35):         self.pos = 0
state.py(36):         self.name = "AM"
state.py(63):         self.fmstate = FmState(self)
 --- modulename: state, funcname: __init__
state.py(46):         self.radio = radio
state.py(47):         self.stations = ["81.3", "89.1", "103.9"]
state.py(48):         self.pos = 0
state.py(49):         self.name = "FM"
state.py(64):         self.state = self.amstate
state.py(76):     actions = [radio.scan] * 2 + [radio.toggle_amfm] + [radio.scan] * 2
state.py(77):     actions *= 2
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 1380 AM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 1510 AM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: toggle_amfm
state.py(67):         self.state.toggle_amfm()
 --- modulename: state, funcname: toggle_amfm
state.py(39):         print(u"Switching to FM")
Switching to FM
state.py(40):         self.radio.state = self.radio.fmstate
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 89.1 FM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 103.9 FM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(25):             self.pos = 0
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 81.3 FM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 89.1 FM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: toggle_amfm
state.py(67):         self.state.toggle_amfm()
 --- modulename: state, funcname: toggle_amfm
state.py(52):         print(u"Switching to AM")
Switching to AM
state.py(53):         self.radio.state = self.radio.amstate
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(25):             self.pos = 0
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 1250 AM
state.py(79):     for action in actions:
state.py(80):         action()
 --- modulename: state, funcname: scan
state.py(70):         self.state.scan()
 --- modulename: state, funcname: scan
state.py(23):         self.pos += 1
state.py(24):         if self.pos == len(self.stations):
state.py(26):         print(u"Scanning... Station is %s %s" %
state.py(27):               (self.stations[self.pos], self.name))
Scanning... Station is 1380 AM
state.py(79):     for action in actions:
