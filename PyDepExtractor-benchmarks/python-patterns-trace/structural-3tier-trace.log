 --- modulename: 3-tier, funcname: <module>
3-tier.py(7): """
3-tier.py(10): class Data(object):
 --- modulename: 3-tier, funcname: Data
3-tier.py(10): class Data(object):
3-tier.py(11):     """ Data Store Class """
3-tier.py(14):         'milk': {'price': 1.50, 'quantity': 10},
3-tier.py(15):         'eggs': {'price': 0.20, 'quantity': 100},
3-tier.py(16):         'cheese': {'price': 2.00, 'quantity': 10}
3-tier.py(19):     def __get__(self, obj, klas):
3-tier.py(24): class BusinessLogic(object):
 --- modulename: 3-tier, funcname: BusinessLogic
3-tier.py(24): class BusinessLogic(object):
3-tier.py(25):     """ Business logic holding data store instances """
3-tier.py(27):     data = Data()
3-tier.py(29):     def product_list(self):
3-tier.py(32):     def product_information(self, product):
3-tier.py(36): class Ui(object):
 --- modulename: 3-tier, funcname: Ui
3-tier.py(36): class Ui(object):
3-tier.py(37):     """ UI interaction class """
3-tier.py(39):     def __init__(self):
3-tier.py(42):     def get_product_list(self):
3-tier.py(48):     def get_product_information(self, product):
3-tier.py(60): def main():
3-tier.py(68): if __name__ == '__main__':
3-tier.py(69):     main()
 --- modulename: 3-tier, funcname: main
3-tier.py(61):     ui = Ui()
 --- modulename: 3-tier, funcname: __init__
3-tier.py(40):         self.business_logic = BusinessLogic()
3-tier.py(62):     ui.get_product_list()
 --- modulename: 3-tier, funcname: get_product_list
3-tier.py(43):         print('PRODUCT LIST:')
PRODUCT LIST:
3-tier.py(44):         for product in self.business_logic.product_list():
 --- modulename: 3-tier, funcname: product_list
3-tier.py(30):         return self.data['products'].keys()
 --- modulename: 3-tier, funcname: __get__
3-tier.py(20):         print("(Fetching from Data Store)")
(Fetching from Data Store)
3-tier.py(21):         return {'products': self.products}
3-tier.py(45):             print(product)
milk
3-tier.py(44):         for product in self.business_logic.product_list():
3-tier.py(45):             print(product)
eggs
3-tier.py(44):         for product in self.business_logic.product_list():
3-tier.py(45):             print(product)
cheese
3-tier.py(44):         for product in self.business_logic.product_list():
3-tier.py(46):         print('')

3-tier.py(63):     ui.get_product_information('cheese')
 --- modulename: 3-tier, funcname: get_product_information
3-tier.py(49):         product_info = self.business_logic.product_information(product)
 --- modulename: 3-tier, funcname: product_information
3-tier.py(33):         return self.data['products'].get(product, None)
 --- modulename: 3-tier, funcname: __get__
3-tier.py(20):         print("(Fetching from Data Store)")
(Fetching from Data Store)
3-tier.py(21):         return {'products': self.products}
3-tier.py(50):         if product_info:
3-tier.py(51):             print('PRODUCT INFORMATION:')
PRODUCT INFORMATION:
3-tier.py(52):             print('Name: {0}, Price: {1:.2f}, Quantity: {2:}'.format(
3-tier.py(53):                 product.title(), product_info.get('price', 0),
3-tier.py(54):                 product_info.get('quantity', 0)))
Name: Cheese, Price: 2.00, Quantity: 10
3-tier.py(64):     ui.get_product_information('eggs')
 --- modulename: 3-tier, funcname: get_product_information
3-tier.py(49):         product_info = self.business_logic.product_information(product)
 --- modulename: 3-tier, funcname: product_information
3-tier.py(33):         return self.data['products'].get(product, None)
 --- modulename: 3-tier, funcname: __get__
3-tier.py(20):         print("(Fetching from Data Store)")
(Fetching from Data Store)
3-tier.py(21):         return {'products': self.products}
3-tier.py(50):         if product_info:
3-tier.py(51):             print('PRODUCT INFORMATION:')
PRODUCT INFORMATION:
3-tier.py(52):             print('Name: {0}, Price: {1:.2f}, Quantity: {2:}'.format(
3-tier.py(53):                 product.title(), product_info.get('price', 0),
3-tier.py(54):                 product_info.get('quantity', 0)))
Name: Eggs, Price: 0.20, Quantity: 100
3-tier.py(65):     ui.get_product_information('milk')
 --- modulename: 3-tier, funcname: get_product_information
3-tier.py(49):         product_info = self.business_logic.product_information(product)
 --- modulename: 3-tier, funcname: product_information
3-tier.py(33):         return self.data['products'].get(product, None)
 --- modulename: 3-tier, funcname: __get__
3-tier.py(20):         print("(Fetching from Data Store)")
(Fetching from Data Store)
3-tier.py(21):         return {'products': self.products}
3-tier.py(50):         if product_info:
3-tier.py(51):             print('PRODUCT INFORMATION:')
PRODUCT INFORMATION:
3-tier.py(52):             print('Name: {0}, Price: {1:.2f}, Quantity: {2:}'.format(
3-tier.py(53):                 product.title(), product_info.get('price', 0),
3-tier.py(54):                 product_info.get('quantity', 0)))
Name: Milk, Price: 1.50, Quantity: 10
3-tier.py(66):     ui.get_product_information('arepas')
 --- modulename: 3-tier, funcname: get_product_information
3-tier.py(49):         product_info = self.business_logic.product_information(product)
 --- modulename: 3-tier, funcname: product_information
3-tier.py(33):         return self.data['products'].get(product, None)
 --- modulename: 3-tier, funcname: __get__
3-tier.py(20):         print("(Fetching from Data Store)")
(Fetching from Data Store)
3-tier.py(21):         return {'products': self.products}
3-tier.py(50):         if product_info:
3-tier.py(56):             print('That product "{0}" does not exist in the records'.format(
3-tier.py(57):                 product))
That product "arepas" does not exist in the records
