 --- modulename: visitor, funcname: <module>
visitor.py(9): """
visitor.py(12): class Node(object):
 --- modulename: visitor, funcname: Node
visitor.py(12): class Node(object):
visitor.py(13):     pass
visitor.py(16): class A(Node):
 --- modulename: visitor, funcname: A
visitor.py(16): class A(Node):
visitor.py(17):     pass
visitor.py(20): class B(Node):
 --- modulename: visitor, funcname: B
visitor.py(20): class B(Node):
visitor.py(21):     pass
visitor.py(24): class C(A, B):
 --- modulename: visitor, funcname: C
visitor.py(24): class C(A, B):
visitor.py(25):     pass
visitor.py(28): class Visitor(object):
 --- modulename: visitor, funcname: Visitor
visitor.py(28): class Visitor(object):
visitor.py(30):     def visit(self, node, *args, **kwargs):
visitor.py(42):     def generic_visit(self, node, *args, **kwargs):
visitor.py(45):     def visit_B(self, node, *args, **kwargs):
visitor.py(49): a = A()
visitor.py(50): b = B()
visitor.py(51): c = C()
visitor.py(52): visitor = Visitor()
visitor.py(53): visitor.visit(a)
 --- modulename: visitor, funcname: visit
visitor.py(31):         meth = None
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(38):         if not meth:
visitor.py(39):             meth = self.generic_visit
visitor.py(40):         return meth(node, *args, **kwargs)
 --- modulename: visitor, funcname: generic_visit
visitor.py(43):         print('generic_visit ' + node.__class__.__name__)
generic_visit A
visitor.py(54): visitor.visit(b)
 --- modulename: visitor, funcname: visit
visitor.py(31):         meth = None
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(36):                 break
visitor.py(38):         if not meth:
visitor.py(40):         return meth(node, *args, **kwargs)
 --- modulename: visitor, funcname: visit_B
visitor.py(46):         print('visit_B ' + node.__class__.__name__)
visit_B B
visitor.py(55): visitor.visit(c)
 --- modulename: visitor, funcname: visit
visitor.py(31):         meth = None
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(32):         for cls in node.__class__.__mro__:
visitor.py(33):             meth_name = 'visit_' + cls.__name__
visitor.py(34):             meth = getattr(self, meth_name, None)
visitor.py(35):             if meth:
visitor.py(36):                 break
visitor.py(38):         if not meth:
visitor.py(40):         return meth(node, *args, **kwargs)
 --- modulename: visitor, funcname: visit_B
visitor.py(46):         print('visit_B ' + node.__class__.__name__)
visit_B C
