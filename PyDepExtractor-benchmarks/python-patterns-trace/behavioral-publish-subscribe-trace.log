 --- modulename: publish_subscribe, funcname: <module>
publish_subscribe.py(7): """
publish_subscribe.py(10): class Provider:
 --- modulename: publish_subscribe, funcname: Provider
publish_subscribe.py(10): class Provider:
publish_subscribe.py(12):     def __init__(self):
publish_subscribe.py(16):     def notify(self, msg):
publish_subscribe.py(19):     def subscribe(self, msg, subscriber):
publish_subscribe.py(22):     def unsubscribe(self, msg, subscriber):
publish_subscribe.py(25):     def update(self):
publish_subscribe.py(32): class Publisher:
 --- modulename: publish_subscribe, funcname: Publisher
publish_subscribe.py(32): class Publisher:
publish_subscribe.py(34):     def __init__(self, msg_center):
publish_subscribe.py(37):     def publish(self, msg):
publish_subscribe.py(41): class Subscriber:
 --- modulename: publish_subscribe, funcname: Subscriber
publish_subscribe.py(41): class Subscriber:
publish_subscribe.py(43):     def __init__(self, name, msg_center):
publish_subscribe.py(47):     def subscribe(self, msg):
publish_subscribe.py(50):     def unsubscribe(self, msg):
publish_subscribe.py(53):     def run(self, msg):
publish_subscribe.py(57): def main():
publish_subscribe.py(84): if __name__ == "__main__":
publish_subscribe.py(85):     main()
 --- modulename: publish_subscribe, funcname: main
publish_subscribe.py(58):     message_center = Provider()
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(13):         self.msg_queue = []
publish_subscribe.py(14):         self.subscribers = {}
publish_subscribe.py(60):     fftv = Publisher(message_center)
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(35):         self.provider = msg_center
publish_subscribe.py(62):     jim = Subscriber("jim", message_center)
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(44):         self.name = name
publish_subscribe.py(45):         self.provider = msg_center
publish_subscribe.py(63):     jim.subscribe("cartoon")
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(48):         self.provider.subscribe(msg, self)
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(20):         self.subscribers.setdefault(msg, []).append(subscriber)
publish_subscribe.py(64):     jack = Subscriber("jack", message_center)
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(44):         self.name = name
publish_subscribe.py(45):         self.provider = msg_center
publish_subscribe.py(65):     jack.subscribe("music")
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(48):         self.provider.subscribe(msg, self)
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(20):         self.subscribers.setdefault(msg, []).append(subscriber)
publish_subscribe.py(66):     gee = Subscriber("gee", message_center)
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(44):         self.name = name
publish_subscribe.py(45):         self.provider = msg_center
publish_subscribe.py(67):     gee.subscribe("movie")
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(48):         self.provider.subscribe(msg, self)
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(20):         self.subscribers.setdefault(msg, []).append(subscriber)
publish_subscribe.py(68):     vani = Subscriber("vani", message_center)
 --- modulename: publish_subscribe, funcname: __init__
publish_subscribe.py(44):         self.name = name
publish_subscribe.py(45):         self.provider = msg_center
publish_subscribe.py(69):     vani.subscribe("movie")
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(48):         self.provider.subscribe(msg, self)
 --- modulename: publish_subscribe, funcname: subscribe
publish_subscribe.py(20):         self.subscribers.setdefault(msg, []).append(subscriber)
publish_subscribe.py(70):     vani.unsubscribe("movie")
 --- modulename: publish_subscribe, funcname: unsubscribe
publish_subscribe.py(51):         self.provider.unsubscribe(msg, self)
 --- modulename: publish_subscribe, funcname: unsubscribe
publish_subscribe.py(23):         self.subscribers[msg].remove(subscriber)
publish_subscribe.py(72):     fftv.publish("cartoon")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(73):     fftv.publish("music")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(74):     fftv.publish("ads")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(75):     fftv.publish("movie")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(76):     fftv.publish("cartoon")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(77):     fftv.publish("cartoon")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(78):     fftv.publish("movie")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(79):     fftv.publish("blank")
 --- modulename: publish_subscribe, funcname: publish
publish_subscribe.py(38):         self.provider.notify(msg)
 --- modulename: publish_subscribe, funcname: notify
publish_subscribe.py(17):         self.msg_queue.append(msg)
publish_subscribe.py(81):     message_center.update()
 --- modulename: publish_subscribe, funcname: update
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
jim got cartoon
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
jack got music
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
gee got movie
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
jim got cartoon
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
jim got cartoon
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(28):                 sub.run(msg)
 --- modulename: publish_subscribe, funcname: run
publish_subscribe.py(54):         print("{} got {}".format(self.name, msg))
gee got movie
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(27):             for sub in self.subscribers.get(msg, []):
publish_subscribe.py(26):         for msg in self.msg_queue:
publish_subscribe.py(29):         self.msg_queue = []
