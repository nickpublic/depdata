 --- modulename: decorator, funcname: <module>
decorator.py(28): """
decorator.py(30): from __future__ import print_function
decorator.py(32): class TextTag(object):
 --- modulename: decorator, funcname: TextTag
decorator.py(32): class TextTag(object):
decorator.py(33):     """Represents a base text tag"""
decorator.py(34):     def __init__(self, text):
decorator.py(37):     def render(self):
decorator.py(41): class BoldWrapper(TextTag):
 --- modulename: decorator, funcname: BoldWrapper
decorator.py(41): class BoldWrapper(TextTag):
decorator.py(42):     """Wraps a tag in <b>"""
decorator.py(43):     def __init__(self, wrapped):
decorator.py(46):     def render(self):
decorator.py(50): class ItalicWrapper(TextTag):
 --- modulename: decorator, funcname: ItalicWrapper
decorator.py(50): class ItalicWrapper(TextTag):
decorator.py(51):     """Wraps a tag in <i>"""
decorator.py(52):     def __init__(self, wrapped):
decorator.py(55):     def render(self):
decorator.py(58): if __name__ == '__main__':
decorator.py(59):     simple_hello = TextTag("hello, world!")
 --- modulename: decorator, funcname: __init__
decorator.py(35):         self._text = text
decorator.py(60):     special_hello = ItalicWrapper(BoldWrapper(simple_hello))
 --- modulename: decorator, funcname: __init__
decorator.py(44):         self._wrapped = wrapped
 --- modulename: decorator, funcname: __init__
decorator.py(53):         self._wrapped = wrapped
decorator.py(61):     print("before:", simple_hello.render())
 --- modulename: decorator, funcname: render
decorator.py(38):         return self._text
before: hello, world!
decorator.py(62):     print("after:", special_hello.render())
 --- modulename: decorator, funcname: render
decorator.py(56):         return "<i>{}</i>".format(self._wrapped.render())
 --- modulename: decorator, funcname: render
decorator.py(47):         return "<b>{}</b>".format(self._wrapped.render())
 --- modulename: decorator, funcname: render
decorator.py(38):         return self._text
after: <i><b>hello, world!</b></i>
