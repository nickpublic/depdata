 --- modulename: mvc, funcname: <module>
mvc.py(7): """
mvc.py(9): class Model(object):
 --- modulename: mvc, funcname: Model
mvc.py(9): class Model(object):
mvc.py(11):     def __iter__(self):
mvc.py(14):     def get(self, item):
mvc.py(19):     @property
mvc.py(24): class ProductModel(Model):
 --- modulename: mvc, funcname: ProductModel
mvc.py(24): class ProductModel(Model):
mvc.py(26):     class Price(float):
 --- modulename: mvc, funcname: Price
mvc.py(26):     class Price(float):
mvc.py(28):         __str__ functionality."""
mvc.py(30):         def __str__(self):
mvc.py(41):         'milk': {'price': Price(1.50), 'quantity': 10},
mvc.py(42):         'eggs': {'price': Price(0.20), 'quantity': 100},
mvc.py(43):         'cheese': {'price': Price(2.00), 'quantity': 10}
mvc.py(46):     item_type = 'product'
mvc.py(48):     def __iter__(self):
mvc.py(52):     def get(self, product):
mvc.py(59): class View(object):
 --- modulename: mvc, funcname: View
mvc.py(59): class View(object):
mvc.py(61):     def show_item_list(self, item_type, item_list):
mvc.py(64):     def show_item_information(self, item_type, item_name, item_info):
mvc.py(69):     def item_not_found(self, item_type, item_name):
mvc.py(73): class ConsoleView(View):
 --- modulename: mvc, funcname: ConsoleView
mvc.py(73): class ConsoleView(View):
mvc.py(75):     def show_item_list(self, item_type, item_list):
mvc.py(81):     @staticmethod
mvc.py(85):     def show_item_information(self, item_type, item_name, item_info):
mvc.py(93):     def item_not_found(self, item_type, item_name):
mvc.py(98): class Controller(object):
 --- modulename: mvc, funcname: Controller
mvc.py(98): class Controller(object):
mvc.py(100):     def __init__(self, model, view):
mvc.py(104):     def show_items(self):
mvc.py(109):     def show_item_information(self, item_name):
mvc.py(120): if __name__ == '__main__':
mvc.py(122):     model = ProductModel()
mvc.py(123):     view = ConsoleView()
mvc.py(124):     controller = Controller(model, view)
 --- modulename: mvc, funcname: __init__
mvc.py(101):         self.model = model
mvc.py(102):         self.view = view
mvc.py(125):     controller.show_items()
 --- modulename: mvc, funcname: show_items
mvc.py(105):         items = list(self.model)
 --- modulename: mvc, funcname: __iter__
mvc.py(49):         for item in self.products:
mvc.py(50):             yield item
 --- modulename: mvc, funcname: __iter__
mvc.py(49):         for item in self.products:
mvc.py(50):             yield item
 --- modulename: mvc, funcname: __iter__
mvc.py(49):         for item in self.products:
mvc.py(50):             yield item
 --- modulename: mvc, funcname: __iter__
mvc.py(49):         for item in self.products:
mvc.py(106):         item_type = self.model.item_type
mvc.py(107):         self.view.show_item_list(item_type, items)
 --- modulename: mvc, funcname: show_item_list
mvc.py(76):         print(item_type.upper() + ' LIST:')
PRODUCT LIST:
mvc.py(77):         for item in item_list:
mvc.py(78):             print(item)
milk
mvc.py(77):         for item in item_list:
mvc.py(78):             print(item)
eggs
mvc.py(77):         for item in item_list:
mvc.py(78):             print(item)
cheese
mvc.py(77):         for item in item_list:
mvc.py(79):         print('')

mvc.py(126):     controller.show_item_information('cheese')
 --- modulename: mvc, funcname: show_item_information
mvc.py(110):         try:
mvc.py(111):             item_info = self.model.get(item_name)
 --- modulename: mvc, funcname: get
mvc.py(53):         try:
mvc.py(54):             return self.products[product]
mvc.py(116):             item_type = self.model.item_type
mvc.py(117):             self.view.show_item_information(item_type, item_name, item_info)
 --- modulename: mvc, funcname: show_item_information
mvc.py(86):         print(item_type.upper() + ' INFORMATION:')
PRODUCT INFORMATION:
mvc.py(87):         printout = 'Name: %s' % item_name
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
 --- modulename: mvc, funcname: __str__
mvc.py(31):             first_digits_str = str(round(self, 2))
mvc.py(32):             try:
mvc.py(33):                 dot_location = first_digits_str.index('.')
mvc.py(37):                 return (first_digits_str +
mvc.py(38):                         '0' * (3 + dot_location - len(first_digits_str)))
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
mvc.py(88):         for key, value in item_info.items():
mvc.py(90):         printout += '\n'
mvc.py(91):         print(printout)
Name: cheese, Price: 2.00, Quantity: 10

mvc.py(127):     controller.show_item_information('eggs')
 --- modulename: mvc, funcname: show_item_information
mvc.py(110):         try:
mvc.py(111):             item_info = self.model.get(item_name)
 --- modulename: mvc, funcname: get
mvc.py(53):         try:
mvc.py(54):             return self.products[product]
mvc.py(116):             item_type = self.model.item_type
mvc.py(117):             self.view.show_item_information(item_type, item_name, item_info)
 --- modulename: mvc, funcname: show_item_information
mvc.py(86):         print(item_type.upper() + ' INFORMATION:')
PRODUCT INFORMATION:
mvc.py(87):         printout = 'Name: %s' % item_name
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
 --- modulename: mvc, funcname: __str__
mvc.py(31):             first_digits_str = str(round(self, 2))
mvc.py(32):             try:
mvc.py(33):                 dot_location = first_digits_str.index('.')
mvc.py(37):                 return (first_digits_str +
mvc.py(38):                         '0' * (3 + dot_location - len(first_digits_str)))
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
mvc.py(88):         for key, value in item_info.items():
mvc.py(90):         printout += '\n'
mvc.py(91):         print(printout)
Name: eggs, Price: 0.20, Quantity: 100

mvc.py(128):     controller.show_item_information('milk')
 --- modulename: mvc, funcname: show_item_information
mvc.py(110):         try:
mvc.py(111):             item_info = self.model.get(item_name)
 --- modulename: mvc, funcname: get
mvc.py(53):         try:
mvc.py(54):             return self.products[product]
mvc.py(116):             item_type = self.model.item_type
mvc.py(117):             self.view.show_item_information(item_type, item_name, item_info)
 --- modulename: mvc, funcname: show_item_information
mvc.py(86):         print(item_type.upper() + ' INFORMATION:')
PRODUCT INFORMATION:
mvc.py(87):         printout = 'Name: %s' % item_name
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
 --- modulename: mvc, funcname: __str__
mvc.py(31):             first_digits_str = str(round(self, 2))
mvc.py(32):             try:
mvc.py(33):                 dot_location = first_digits_str.index('.')
mvc.py(37):                 return (first_digits_str +
mvc.py(38):                         '0' * (3 + dot_location - len(first_digits_str)))
mvc.py(88):         for key, value in item_info.items():
mvc.py(89):             printout += (', ' + self.capitalizer(str(key)) + ': ' + str(value))
 --- modulename: mvc, funcname: capitalizer
mvc.py(83):         return string[0].upper() + string[1:].lower()
mvc.py(88):         for key, value in item_info.items():
mvc.py(90):         printout += '\n'
mvc.py(91):         print(printout)
Name: milk, Price: 1.50, Quantity: 10

mvc.py(129):     controller.show_item_information('arepas')
 --- modulename: mvc, funcname: show_item_information
mvc.py(110):         try:
mvc.py(111):             item_info = self.model.get(item_name)
 --- modulename: mvc, funcname: get
mvc.py(53):         try:
mvc.py(54):             return self.products[product]
mvc.py(55):         except KeyError as e:
mvc.py(56):             raise KeyError((str(e) + " not in the model's item list."))
mvc.py(112):         except:
mvc.py(113):             item_type = self.model.item_type
mvc.py(114):             self.view.item_not_found(item_type, item_name)
 --- modulename: mvc, funcname: item_not_found
mvc.py(94):         print('That %s "%s" does not exist in the records' %
mvc.py(95):               (item_type, item_name))
That product "arepas" does not exist in the records
