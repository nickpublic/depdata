 --- modulename: registry, funcname: <module>
registry.py(5): class RegistryHolder(type):
 --- modulename: registry, funcname: RegistryHolder
registry.py(5): class RegistryHolder(type):
registry.py(7):     REGISTRY = {}
registry.py(9):     def __new__(cls, name, bases, attrs):
registry.py(18):     @classmethod
registry.py(23): class BaseRegisteredClass(object):
 --- modulename: registry, funcname: BaseRegisteredClass
registry.py(23): class BaseRegisteredClass(object):
registry.py(24):     __metaclass__ = RegistryHolder
registry.py(30):     pass
registry.py(32): if __name__ == "__main__":
registry.py(33):     print("Before subclassing: ")
Before subclassing: 
registry.py(34):     for k in RegistryHolder.REGISTRY:
registry.py(37):     class ClassRegistree(BaseRegisteredClass):
 --- modulename: registry, funcname: ClassRegistree
registry.py(37):     class ClassRegistree(BaseRegisteredClass):
registry.py(39):         def __init__(self, *args, **kwargs):
registry.py(42):     print("After subclassing: ")
After subclassing: 
registry.py(43):     for k in RegistryHolder.REGISTRY:
