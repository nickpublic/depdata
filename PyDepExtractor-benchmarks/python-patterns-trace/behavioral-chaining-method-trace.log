 --- modulename: chaining_method, funcname: <module>
chaining_method.py(4): from __future__ import print_function
chaining_method.py(7): class Person(object):
 --- modulename: chaining_method, funcname: Person
chaining_method.py(7): class Person(object):
chaining_method.py(9):     def __init__(self, name, action):
chaining_method.py(13):     def do_action(self):
chaining_method.py(18): class Action(object):
 --- modulename: chaining_method, funcname: Action
chaining_method.py(18): class Action(object):
chaining_method.py(20):     def __init__(self, name):
chaining_method.py(23):     def amount(self, val):
chaining_method.py(27):     def stop(self):
chaining_method.py(30): if __name__ == '__main__':
chaining_method.py(32):     move = Action('move')
 --- modulename: chaining_method, funcname: __init__
chaining_method.py(21):         self.name = name
chaining_method.py(33):     person = Person('Jack', move)
 --- modulename: chaining_method, funcname: __init__
chaining_method.py(10):         self.name = name
chaining_method.py(11):         self.action = action
chaining_method.py(34):     person.do_action().amount('5m').stop()
 --- modulename: chaining_method, funcname: do_action
chaining_method.py(14):         print(self.name, self.action.name, end=' ')
Jack move chaining_method.py(15):         return self.action
 --- modulename: chaining_method, funcname: amount
chaining_method.py(24):         print(val, end=' ')
5m chaining_method.py(25):         return self
 --- modulename: chaining_method, funcname: stop
chaining_method.py(28):         print('then stop')
then stop
