 --- modulename: specification, funcname: <module>
specification.py(9): """
specification.py(11): from abc import abstractmethod
specification.py(14): class Specification(object):
 --- modulename: specification, funcname: Specification
specification.py(14): class Specification(object):
specification.py(16):     def and_specification(self, candidate):
specification.py(19):     def or_specification(self, candidate):
specification.py(22):     def not_specification(self):
specification.py(25):     @abstractmethod
specification.py(30): class CompositeSpecification(Specification):
 --- modulename: specification, funcname: CompositeSpecification
specification.py(30): class CompositeSpecification(Specification):
specification.py(32):     @abstractmethod
specification.py(36):     def and_specification(self, candidate):
specification.py(39):     def or_specification(self, candidate):
specification.py(42):     def not_specification(self):
specification.py(46): class AndSpecification(CompositeSpecification):
 --- modulename: specification, funcname: AndSpecification
specification.py(46): class AndSpecification(CompositeSpecification):
specification.py(47):     _one = Specification()
specification.py(48):     _other = Specification()
specification.py(50):     def __init__(self, one, other):
specification.py(54):     def is_satisfied_by(self, candidate):
specification.py(59): class OrSpecification(CompositeSpecification):
 --- modulename: specification, funcname: OrSpecification
specification.py(59): class OrSpecification(CompositeSpecification):
specification.py(60):     _one = Specification()
specification.py(61):     _other = Specification()
specification.py(63):     def __init__(self, one, other):
specification.py(67):     def is_satisfied_by(self, candidate):
specification.py(72): class NotSpecification(CompositeSpecification):
 --- modulename: specification, funcname: NotSpecification
specification.py(72): class NotSpecification(CompositeSpecification):
specification.py(73):     _wrapped = Specification()
specification.py(75):     def __init__(self, wrapped):
specification.py(78):     def is_satisfied_by(self, candidate):
specification.py(82): class User(object):
 --- modulename: specification, funcname: User
specification.py(82): class User(object):
specification.py(84):     def __init__(self, super_user=False):
specification.py(88): class UserSpecification(CompositeSpecification):
 --- modulename: specification, funcname: UserSpecification
specification.py(88): class UserSpecification(CompositeSpecification):
specification.py(90):     def is_satisfied_by(self, candidate):
specification.py(94): class SuperUserSpecification(CompositeSpecification):
 --- modulename: specification, funcname: SuperUserSpecification
specification.py(94): class SuperUserSpecification(CompositeSpecification):
specification.py(96):     def is_satisfied_by(self, candidate):
specification.py(100): if __name__ == '__main__':
specification.py(101):     print('Specification')
Specification
specification.py(102):     andrey = User()
 --- modulename: specification, funcname: __init__
specification.py(85):         self.super_user = super_user
specification.py(103):     ivan = User(super_user=True)
 --- modulename: specification, funcname: __init__
specification.py(85):         self.super_user = super_user
specification.py(104):     vasiliy = 'not User instance'
specification.py(106):     root_specification = UserSpecification().\
specification.py(107):         and_specification(SuperUserSpecification())
 --- modulename: specification, funcname: and_specification
specification.py(37):         return AndSpecification(self, candidate)
 --- modulename: specification, funcname: __init__
specification.py(51):         self._one = one
specification.py(52):         self._other = other
specification.py(109):     print(root_specification.is_satisfied_by(andrey))
 --- modulename: specification, funcname: is_satisfied_by
specification.py(55):         return bool(self._one.is_satisfied_by(candidate) and
 --- modulename: specification, funcname: is_satisfied_by
specification.py(91):         return isinstance(candidate, User)
specification.py(56):                     self._other.is_satisfied_by(candidate))
 --- modulename: specification, funcname: is_satisfied_by
specification.py(97):         return getattr(candidate, 'super_user', False)
False
specification.py(110):     print(root_specification.is_satisfied_by(ivan))
 --- modulename: specification, funcname: is_satisfied_by
specification.py(55):         return bool(self._one.is_satisfied_by(candidate) and
 --- modulename: specification, funcname: is_satisfied_by
specification.py(91):         return isinstance(candidate, User)
specification.py(56):                     self._other.is_satisfied_by(candidate))
 --- modulename: specification, funcname: is_satisfied_by
specification.py(97):         return getattr(candidate, 'super_user', False)
True
specification.py(111):     print(root_specification.is_satisfied_by(vasiliy))
 --- modulename: specification, funcname: is_satisfied_by
specification.py(55):         return bool(self._one.is_satisfied_by(candidate) and
 --- modulename: specification, funcname: is_satisfied_by
specification.py(91):         return isinstance(candidate, User)
False
