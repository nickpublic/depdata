 --- modulename: graph_search, funcname: <module>
graph_search.py(4): ""
graph_search.py(6): class GraphSearch:
 --- modulename: graph_search, funcname: GraphSearch
graph_search.py(6): class GraphSearch:
graph_search.py(9):     http://www.python.org/doc/essays/graphs/"""
graph_search.py(11):     def __init__(self, graph):
graph_search.py(14):     def find_path(self, start, end, path=None):
graph_search.py(26):     def find_all_path(self, start, end, path=None):
graph_search.py(38):     def find_shortest_path(self, start, end, path=None):
graph_search.py(54): graph = {'A': ['B', 'C'],
graph_search.py(55):          'B': ['C', 'D'],
graph_search.py(56):          'C': ['D'],
graph_search.py(57):          'D': ['C'],
graph_search.py(58):          'E': ['F'],
graph_search.py(59):          'F': ['C']
graph_search.py(63): graph1 = GraphSearch(graph)
 --- modulename: graph_search, funcname: __init__
graph_search.py(12):         self.graph = graph
graph_search.py(66): print(graph1.find_path('A', 'D'))
 --- modulename: graph_search, funcname: find_path
graph_search.py(15):         path = path or []
graph_search.py(17):         path.append(start)
graph_search.py(18):         if start == end:
graph_search.py(20):         for node in self.graph.get(start, []):
graph_search.py(21):             if node not in path:
graph_search.py(22):                 newpath = self.find_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_path
graph_search.py(15):         path = path or []
graph_search.py(17):         path.append(start)
graph_search.py(18):         if start == end:
graph_search.py(20):         for node in self.graph.get(start, []):
graph_search.py(21):             if node not in path:
graph_search.py(22):                 newpath = self.find_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_path
graph_search.py(15):         path = path or []
graph_search.py(17):         path.append(start)
graph_search.py(18):         if start == end:
graph_search.py(20):         for node in self.graph.get(start, []):
graph_search.py(21):             if node not in path:
graph_search.py(22):                 newpath = self.find_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_path
graph_search.py(15):         path = path or []
graph_search.py(17):         path.append(start)
graph_search.py(18):         if start == end:
graph_search.py(19):             return path
graph_search.py(23):                 if newpath:
graph_search.py(24):                     return newpath
graph_search.py(23):                 if newpath:
graph_search.py(24):                     return newpath
graph_search.py(23):                 if newpath:
graph_search.py(24):                     return newpath
['A', 'B', 'C', 'D']
graph_search.py(67): print(graph1.find_all_path('A', 'D'))
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(31):         paths = []
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(31):         paths = []
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(31):         paths = []
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(30):             return [path]
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(36):         return paths
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(30):             return [path]
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(36):         return paths
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(31):         paths = []
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(33):             if node not in path:
graph_search.py(34):                 newpaths = self.find_all_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_all_path
graph_search.py(27):         path = path or []
graph_search.py(28):         path.append(start)
graph_search.py(29):         if start == end:
graph_search.py(30):             return [path]
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(36):         return paths
graph_search.py(35):                 paths.extend(newpaths)
graph_search.py(32):         for node in self.graph.get(start, []):
graph_search.py(36):         return paths
[['A', 'B', 'C', 'D'], ['A', 'B', 'D'], ['A', 'C', 'D']]
graph_search.py(68): print(graph1.find_shortest_path('A', 'D'))
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(44):         shortest = None
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(44):         shortest = None
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(44):         shortest = None
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(43):             return path
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(50):                         shortest = newpath
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(51):         return shortest
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(50):                         shortest = newpath
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(43):             return path
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(50):                         shortest = newpath
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(51):         return shortest
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(50):                         shortest = newpath
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(44):         shortest = None
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(46):             if node not in path:
graph_search.py(47):                 newpath = self.find_shortest_path(node, end, path[:])
 --- modulename: graph_search, funcname: find_shortest_path
graph_search.py(39):         path = path or []
graph_search.py(40):         path.append(start)
graph_search.py(42):         if start == end:
graph_search.py(43):             return path
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(50):                         shortest = newpath
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(51):         return shortest
graph_search.py(48):                 if newpath:
graph_search.py(49):                     if not shortest or len(newpath) < len(shortest):
graph_search.py(45):         for node in self.graph.get(start, []):
graph_search.py(51):         return shortest
['A', 'B', 'D']
