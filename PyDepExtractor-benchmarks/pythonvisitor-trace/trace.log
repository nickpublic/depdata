 --- modulename: VisitorDemo_1, funcname: <module>
VisitorDemo_1.py(1): from Car import Car
 --- modulename: Car, funcname: <module>
Car.py(1): from CarElement import CarElement
 --- modulename: CarElement, funcname: <module>
CarElement.py(1): from abc import ABCMeta, abstractmethod
CarElement.py(3): NOT_IMPLEMENTED = "You should implement this."
CarElement.py(5): class CarElement:
 --- modulename: CarElement, funcname: CarElement
CarElement.py(5): class CarElement:
CarElement.py(6):     __metaclass__ = ABCMeta
CarElement.py(8):     @abstractmethod
Car.py(2): from Wheel import Wheel
 --- modulename: Wheel, funcname: <module>
Wheel.py(1): from CarElement import CarElement
Wheel.py(3): class Wheel(CarElement):
 --- modulename: Wheel, funcname: Wheel
Wheel.py(3): class Wheel(CarElement):
Wheel.py(4):     def __init__(self, name):
Wheel.py(6):     def accept(self, visitor):
Wheel.py(8):     def operateWheel(self):
Wheel.py(10):     def printWheel(self):
Wheel.py(12):     def getWheel(self):
Car.py(3): from Body import Body
 --- modulename: Body, funcname: <module>
Body.py(1): from CarElement import CarElement
Body.py(3): class Body(CarElement):
 --- modulename: Body, funcname: Body
Body.py(3): class Body(CarElement):
Body.py(4):     def accept(self, visitor):
Body.py(6):     def operateBody(self):
Body.py(8):     def printBody(self):
Body.py(10):     def getBody(self):
Car.py(4): from Engine import Engine
 --- modulename: Engine, funcname: <module>
Engine.py(1): from CarElement import CarElement
Engine.py(3): class Engine(CarElement):
 --- modulename: Engine, funcname: Engine
Engine.py(3): class Engine(CarElement):
Engine.py(4):     def accept(self, visitor):
Engine.py(6):     def operateEngine(self):
Engine.py(8):     def printEngine(self):
Engine.py(10):     def getEngine(self):
Car.py(6): class Car(CarElement):
 --- modulename: Car, funcname: Car
Car.py(6): class Car(CarElement):
Car.py(7):     def __init__(self):
Car.py(14):     def accept(self, visitor):
Car.py(16):     def operateCar(self):
Car.py(18):     def printCar(self):
Car.py(20):     def getCar(self):
VisitorDemo_1.py(2): from Body import Body
VisitorDemo_1.py(3): from Engine import Engine
VisitorDemo_1.py(4): from Wheel import Wheel
VisitorDemo_1.py(6): from CarElementDoVisitor import CarElementDoVisitor
 --- modulename: CarElementDoVisitor, funcname: <module>
CarElementDoVisitor.py(1): from CarElementVisitor import CarElementVisitor
 --- modulename: CarElementVisitor, funcname: <module>
CarElementVisitor.py(1): from abc import ABCMeta, abstractmethod
CarElementVisitor.py(2): NOT_IMPLEMENTED = "You should implement this."
CarElementVisitor.py(4): class CarElementVisitor:
 --- modulename: CarElementVisitor, funcname: CarElementVisitor
CarElementVisitor.py(4): class CarElementVisitor:
CarElementVisitor.py(5):     __metaclass__ = ABCMeta
CarElementVisitor.py(7):     @abstractmethod
CarElementVisitor.py(11):     @abstractmethod
CarElementVisitor.py(15):     @abstractmethod
CarElementVisitor.py(19):     @abstractmethod
CarElementVisitor.py(23):     def tranverse(self):
CarElementDoVisitor.py(4): class CarElementDoVisitor(CarElementVisitor):
 --- modulename: CarElementDoVisitor, funcname: CarElementDoVisitor
CarElementDoVisitor.py(4): class CarElementDoVisitor(CarElementVisitor):
CarElementDoVisitor.py(5):     def visitBody(self, body):
CarElementDoVisitor.py(8):     def visitCar(self, car):
CarElementDoVisitor.py(11):     def visitWheel(self, wheel):
CarElementDoVisitor.py(14):     def visitEngine(self, engine):
VisitorDemo_1.py(7): from CarElementPrintVisitor import CarElementPrintVisitor
 --- modulename: CarElementPrintVisitor, funcname: <module>
CarElementPrintVisitor.py(2): from CarElementVisitor import CarElementVisitor
CarElementPrintVisitor.py(4): class CarElementPrintVisitor(CarElementVisitor):
 --- modulename: CarElementPrintVisitor, funcname: CarElementPrintVisitor
CarElementPrintVisitor.py(4): class CarElementPrintVisitor(CarElementVisitor):
CarElementPrintVisitor.py(5):     def visitBody(self, body):
CarElementPrintVisitor.py(8):     def visitCar(self, car):
CarElementPrintVisitor.py(11):     def visitWheel(self, wheel):
CarElementPrintVisitor.py(14):     def visitEngine(self, engine):
VisitorDemo_1.py(9): body = Body()
VisitorDemo_1.py(10): engine = Engine()
VisitorDemo_1.py(11): wheel = Wheel("front")
 --- modulename: Wheel, funcname: __init__
Wheel.py(5):         self.name = name
VisitorDemo_1.py(12): car = Car()
 --- modulename: Car, funcname: __init__
Car.py(9):             Wheel("front left"), Wheel("front right"),
 --- modulename: Wheel, funcname: __init__
Wheel.py(5):         self.name = name
 --- modulename: Wheel, funcname: __init__
Wheel.py(5):         self.name = name
Car.py(10):             Wheel("back left"), Wheel("back right"),
 --- modulename: Wheel, funcname: __init__
Wheel.py(5):         self.name = name
 --- modulename: Wheel, funcname: __init__
Wheel.py(5):         self.name = name
Car.py(11):             Body(), Engine()
VisitorDemo_1.py(14): visitor1 = CarElementPrintVisitor()
VisitorDemo_1.py(15): visitor2 = CarElementDoVisitor()
VisitorDemo_1.py(16): body.accept(visitor1)
 --- modulename: Body, funcname: accept
Body.py(5):         visitor.visitBody(self)
 --- modulename: CarElementPrintVisitor, funcname: visitBody
CarElementPrintVisitor.py(6):         body.printBody()
 --- modulename: Body, funcname: printBody
Body.py(9):         print("print body")
print body
VisitorDemo_1.py(17): engine.accept(visitor1)
 --- modulename: Engine, funcname: accept
Engine.py(5):         visitor.visitEngine(self)
 --- modulename: CarElementPrintVisitor, funcname: visitEngine
CarElementPrintVisitor.py(15):         engine.printEngine()
 --- modulename: Engine, funcname: printEngine
Engine.py(9):         print("print engine")
print engine
VisitorDemo_1.py(18): wheel.accept(visitor1)
 --- modulename: Wheel, funcname: accept
Wheel.py(7):         visitor.visitWheel(self)
 --- modulename: CarElementPrintVisitor, funcname: visitWheel
CarElementPrintVisitor.py(12):         wheel.printWheel()
 --- modulename: Wheel, funcname: printWheel
Wheel.py(11):         print("print wheel: " + self.name)
print wheel: front
VisitorDemo_1.py(19): car.accept(visitor1)
 --- modulename: Car, funcname: accept
Car.py(15):         visitor.visitCar(self)
 --- modulename: CarElementPrintVisitor, funcname: visitCar
CarElementPrintVisitor.py(9):         car.printCar()
 --- modulename: Car, funcname: printCar
Car.py(19):         print("print car")
print car
VisitorDemo_1.py(21): body.accept(visitor2)
 --- modulename: Body, funcname: accept
Body.py(5):         visitor.visitBody(self)
 --- modulename: CarElementDoVisitor, funcname: visitBody
CarElementDoVisitor.py(6):         body.operateBody()
 --- modulename: Body, funcname: operateBody
Body.py(7):         print("operate body")
operate body
VisitorDemo_1.py(22): engine.accept(visitor2)
 --- modulename: Engine, funcname: accept
Engine.py(5):         visitor.visitEngine(self)
 --- modulename: CarElementDoVisitor, funcname: visitEngine
CarElementDoVisitor.py(15):         engine.operateEngine()
 --- modulename: Engine, funcname: operateEngine
Engine.py(7):         print("operate engine")
operate engine
VisitorDemo_1.py(23): wheel.accept(visitor2)
 --- modulename: Wheel, funcname: accept
Wheel.py(7):         visitor.visitWheel(self)
 --- modulename: CarElementDoVisitor, funcname: visitWheel
CarElementDoVisitor.py(12):         wheel.operateWheel()
 --- modulename: Wheel, funcname: operateWheel
Wheel.py(9):         print("operate wheel: " + self.name)
operate wheel: front
VisitorDemo_1.py(24): car.accept(visitor2)
 --- modulename: Car, funcname: accept
Car.py(15):         visitor.visitCar(self)
 --- modulename: CarElementDoVisitor, funcname: visitCar
CarElementDoVisitor.py(9):         car.operateCar()
 --- modulename: Car, funcname: operateCar
Car.py(17):         print("operate car")
operate car
